#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Final.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CinemaBookingSystem")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCinema(Cinema instance);
    partial void UpdateCinema(Cinema instance);
    partial void DeleteCinema(Cinema instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertMovy(Movy instance);
    partial void UpdateMovy(Movy instance);
    partial void DeleteMovy(Movy instance);
    partial void InsertFood(Food instance);
    partial void UpdateFood(Food instance);
    partial void DeleteFood(Food instance);
    partial void InsertOrderDetail(OrderDetail instance);
    partial void UpdateOrderDetail(OrderDetail instance);
    partial void DeleteOrderDetail(OrderDetail instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    partial void InsertScreening(Screening instance);
    partial void UpdateScreening(Screening instance);
    partial void DeleteScreening(Screening instance);
    partial void InsertSeat(Seat instance);
    partial void UpdateSeat(Seat instance);
    partial void DeleteSeat(Seat instance);
    partial void InsertTemporaryReservation(TemporaryReservation instance);
    partial void UpdateTemporaryReservation(TemporaryReservation instance);
    partial void DeleteTemporaryReservation(TemporaryReservation instance);
    partial void InsertTicketType(TicketType instance);
    partial void UpdateTicketType(TicketType instance);
    partial void DeleteTicketType(TicketType instance);
    #endregion
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}

        public DataClassesDataContext() :
              base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CinemaBookingSystemConnectionString"].ConnectionString, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<Cinema> Cinemas
		{
			get
			{
				return this.GetTable<Cinema>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Movy> Movies
		{
			get
			{
				return this.GetTable<Movy>();
			}
		}
		
		public System.Data.Linq.Table<Food> Foods
		{
			get
			{
				return this.GetTable<Food>();
			}
		}
		
		public System.Data.Linq.Table<OrderDetail> OrderDetails
		{
			get
			{
				return this.GetTable<OrderDetail>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
		
		public System.Data.Linq.Table<Screening> Screenings
		{
			get
			{
				return this.GetTable<Screening>();
			}
		}
		
		public System.Data.Linq.Table<Seat> Seats
		{
			get
			{
				return this.GetTable<Seat>();
			}
		}
		
		public System.Data.Linq.Table<TemporaryReservation> TemporaryReservations
		{
			get
			{
				return this.GetTable<TemporaryReservation>();
			}
		}
		
		public System.Data.Linq.Table<TicketType> TicketTypes
		{
			get
			{
				return this.GetTable<TicketType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cinemas")]
	public partial class Cinema : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CinemaID;
		
		private string _Name;
		
		private string _Address;
		
		private string _Phone;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
		private EntitySet<Room> _Rooms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCinemaIDChanging(int value);
    partial void OnCinemaIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
		
		public Cinema()
		{
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			this._Rooms = new EntitySet<Room>(new Action<Room>(this.attach_Rooms), new Action<Room>(this.detach_Rooms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CinemaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CinemaID
		{
			get
			{
				return this._CinemaID;
			}
			set
			{
				if ((this._CinemaID != value))
				{
					this.OnCinemaIDChanging(value);
					this.SendPropertyChanging();
					this._CinemaID = value;
					this.SendPropertyChanged("CinemaID");
					this.OnCinemaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(500)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cinema_OrderDetail", Storage="_OrderDetails", ThisKey="CinemaID", OtherKey="CinemaID")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cinema_Room", Storage="_Rooms", ThisKey="CinemaID", OtherKey="CinemaID")]
		public EntitySet<Room> Rooms
		{
			get
			{
				return this._Rooms;
			}
			set
			{
				this._Rooms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Cinema = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Cinema = null;
		}
		
		private void attach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Cinema = this;
		}
		
		private void detach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Cinema = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customers")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _FullName;
		
		private string _Email;
		
		private string _Phone;
		
		private string _PasswordHash;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<TemporaryReservation> _TemporaryReservations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    #endregion
		
		public Customer()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._TemporaryReservations = new EntitySet<TemporaryReservation>(new Action<TemporaryReservation>(this.attach_TemporaryReservations), new Action<TemporaryReservation>(this.detach_TemporaryReservations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(255)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Order", Storage="_Orders", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_TemporaryReservation", Storage="_TemporaryReservations", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<TemporaryReservation> TemporaryReservations
		{
			get
			{
				return this._TemporaryReservations;
			}
			set
			{
				this._TemporaryReservations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_TemporaryReservations(TemporaryReservation entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_TemporaryReservations(TemporaryReservation entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Movies")]
	public partial class Movy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieID;
		
		private string _Title;
		
		private System.Nullable<int> _Duration;
		
		private string _Genre;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _ReleaseDate;
		
		private string _AgeRating;
		
		private string _Image;
		
		private string _TrailerLink;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
		private EntitySet<Screening> _Screenings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDurationChanging(System.Nullable<int> value);
    partial void OnDurationChanged();
    partial void OnGenreChanging(string value);
    partial void OnGenreChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnReleaseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReleaseDateChanged();
    partial void OnAgeRatingChanging(string value);
    partial void OnAgeRatingChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnTrailerLinkChanging(string value);
    partial void OnTrailerLinkChanged();
    #endregion
		
		public Movy()
		{
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			this._Screenings = new EntitySet<Screening>(new Action<Screening>(this.attach_Screenings), new Action<Screening>(this.detach_Screenings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int")]
		public System.Nullable<int> Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Genre", DbType="NVarChar(50)")]
		public string Genre
		{
			get
			{
				return this._Genre;
			}
			set
			{
				if ((this._Genre != value))
				{
					this.OnGenreChanging(value);
					this.SendPropertyChanging();
					this._Genre = value;
					this.SendPropertyChanged("Genre");
					this.OnGenreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReleaseDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReleaseDate
		{
			get
			{
				return this._ReleaseDate;
			}
			set
			{
				if ((this._ReleaseDate != value))
				{
					this.OnReleaseDateChanging(value);
					this.SendPropertyChanging();
					this._ReleaseDate = value;
					this.SendPropertyChanged("ReleaseDate");
					this.OnReleaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeRating", DbType="NVarChar(10)")]
		public string AgeRating
		{
			get
			{
				return this._AgeRating;
			}
			set
			{
				if ((this._AgeRating != value))
				{
					this.OnAgeRatingChanging(value);
					this.SendPropertyChanging();
					this._AgeRating = value;
					this.SendPropertyChanged("AgeRating");
					this.OnAgeRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(255)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrailerLink", DbType="NVarChar(500)")]
		public string TrailerLink
		{
			get
			{
				return this._TrailerLink;
			}
			set
			{
				if ((this._TrailerLink != value))
				{
					this.OnTrailerLinkChanging(value);
					this.SendPropertyChanging();
					this._TrailerLink = value;
					this.SendPropertyChanged("TrailerLink");
					this.OnTrailerLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_OrderDetail", Storage="_OrderDetails", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_Screening", Storage="_Screenings", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<Screening> Screenings
		{
			get
			{
				return this._Screenings;
			}
			set
			{
				this._Screenings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Movy = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Movy = null;
		}
		
		private void attach_Screenings(Screening entity)
		{
			this.SendPropertyChanging();
			entity.Movy = this;
		}
		
		private void detach_Screenings(Screening entity)
		{
			this.SendPropertyChanging();
			entity.Movy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Foods")]
	public partial class Food : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FoodID;
		
		private string _FoodName;
		
		private double _Price;
		
		private string _Description;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
		private EntitySet<TemporaryReservation> _TemporaryReservations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFoodIDChanging(int value);
    partial void OnFoodIDChanged();
    partial void OnFoodNameChanging(string value);
    partial void OnFoodNameChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Food()
		{
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			this._TemporaryReservations = new EntitySet<TemporaryReservation>(new Action<TemporaryReservation>(this.attach_TemporaryReservations), new Action<TemporaryReservation>(this.detach_TemporaryReservations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FoodID
		{
			get
			{
				return this._FoodID;
			}
			set
			{
				if ((this._FoodID != value))
				{
					this.OnFoodIDChanging(value);
					this.SendPropertyChanging();
					this._FoodID = value;
					this.SendPropertyChanged("FoodID");
					this.OnFoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FoodName
		{
			get
			{
				return this._FoodName;
			}
			set
			{
				if ((this._FoodName != value))
				{
					this.OnFoodNameChanging(value);
					this.SendPropertyChanging();
					this._FoodName = value;
					this.SendPropertyChanged("FoodName");
					this.OnFoodNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_OrderDetail", Storage="_OrderDetails", ThisKey="FoodID", OtherKey="FoodID")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_TemporaryReservation", Storage="_TemporaryReservations", ThisKey="FoodID", OtherKey="FoodID")]
		public EntitySet<TemporaryReservation> TemporaryReservations
		{
			get
			{
				return this._TemporaryReservations;
			}
			set
			{
				this._TemporaryReservations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Food = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Food = null;
		}
		
		private void attach_TemporaryReservations(TemporaryReservation entity)
		{
			this.SendPropertyChanging();
			entity.Food = this;
		}
		
		private void detach_TemporaryReservations(TemporaryReservation entity)
		{
			this.SendPropertyChanging();
			entity.Food = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDetails")]
	public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderDetailID;
		
		private int _OrderID;
		
		private string _ItemType;
		
		private int _Quantity;
		
		private double _Price;
		
		private System.Nullable<int> _MovieID;
		
		private System.Nullable<int> _CinemaID;
		
		private System.Nullable<int> _SeatID;
		
		private System.Nullable<System.DateTime> _ScreeningTime;
		
		private System.Nullable<int> _TicketTypeID;
		
		private System.Nullable<int> _FoodID;
		
		private string _MovieTitle;
		
		private string _CinemaName;
		
		private string _SeatNumber;
		
		private string _TicketTypeName;
		
		private System.Nullable<int> _ScreeningID;
		
		private string _FoodName;
		
		private System.Nullable<int> _FoodQuantity;
		
		private EntityRef<Cinema> _Cinema;
		
		private EntityRef<Food> _Food;
		
		private EntityRef<Movy> _Movy;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Screening> _Screening;
		
		private EntityRef<Seat> _Seat;
		
		private EntityRef<TicketType> _TicketType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDetailIDChanging(int value);
    partial void OnOrderDetailIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnItemTypeChanging(string value);
    partial void OnItemTypeChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnMovieIDChanging(System.Nullable<int> value);
    partial void OnMovieIDChanged();
    partial void OnCinemaIDChanging(System.Nullable<int> value);
    partial void OnCinemaIDChanged();
    partial void OnSeatIDChanging(System.Nullable<int> value);
    partial void OnSeatIDChanged();
    partial void OnScreeningTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnScreeningTimeChanged();
    partial void OnTicketTypeIDChanging(System.Nullable<int> value);
    partial void OnTicketTypeIDChanged();
    partial void OnFoodIDChanging(System.Nullable<int> value);
    partial void OnFoodIDChanged();
    partial void OnMovieTitleChanging(string value);
    partial void OnMovieTitleChanged();
    partial void OnCinemaNameChanging(string value);
    partial void OnCinemaNameChanged();
    partial void OnSeatNumberChanging(string value);
    partial void OnSeatNumberChanged();
    partial void OnTicketTypeNameChanging(string value);
    partial void OnTicketTypeNameChanged();
    partial void OnScreeningIDChanging(System.Nullable<int> value);
    partial void OnScreeningIDChanged();
    partial void OnFoodNameChanging(string value);
    partial void OnFoodNameChanged();
    partial void OnFoodQuantityChanging(System.Nullable<int> value);
    partial void OnFoodQuantityChanged();
    #endregion
		
		public OrderDetail()
		{
			this._Cinema = default(EntityRef<Cinema>);
			this._Food = default(EntityRef<Food>);
			this._Movy = default(EntityRef<Movy>);
			this._Order = default(EntityRef<Order>);
			this._Screening = default(EntityRef<Screening>);
			this._Seat = default(EntityRef<Seat>);
			this._TicketType = default(EntityRef<TicketType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderDetailID
		{
			get
			{
				return this._OrderDetailID;
			}
			set
			{
				if ((this._OrderDetailID != value))
				{
					this.OnOrderDetailIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDetailID = value;
					this.SendPropertyChanged("OrderDetailID");
					this.OnOrderDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ItemType
		{
			get
			{
				return this._ItemType;
			}
			set
			{
				if ((this._ItemType != value))
				{
					this.OnItemTypeChanging(value);
					this.SendPropertyChanging();
					this._ItemType = value;
					this.SendPropertyChanged("ItemType");
					this.OnItemTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int")]
		public System.Nullable<int> MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CinemaID", DbType="Int")]
		public System.Nullable<int> CinemaID
		{
			get
			{
				return this._CinemaID;
			}
			set
			{
				if ((this._CinemaID != value))
				{
					if (this._Cinema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCinemaIDChanging(value);
					this.SendPropertyChanging();
					this._CinemaID = value;
					this.SendPropertyChanged("CinemaID");
					this.OnCinemaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatID", DbType="Int")]
		public System.Nullable<int> SeatID
		{
			get
			{
				return this._SeatID;
			}
			set
			{
				if ((this._SeatID != value))
				{
					if (this._Seat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeatIDChanging(value);
					this.SendPropertyChanging();
					this._SeatID = value;
					this.SendPropertyChanged("SeatID");
					this.OnSeatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreeningTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ScreeningTime
		{
			get
			{
				return this._ScreeningTime;
			}
			set
			{
				if ((this._ScreeningTime != value))
				{
					this.OnScreeningTimeChanging(value);
					this.SendPropertyChanging();
					this._ScreeningTime = value;
					this.SendPropertyChanged("ScreeningTime");
					this.OnScreeningTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketTypeID", DbType="Int")]
		public System.Nullable<int> TicketTypeID
		{
			get
			{
				return this._TicketTypeID;
			}
			set
			{
				if ((this._TicketTypeID != value))
				{
					if (this._TicketType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TicketTypeID = value;
					this.SendPropertyChanged("TicketTypeID");
					this.OnTicketTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodID", DbType="Int")]
		public System.Nullable<int> FoodID
		{
			get
			{
				return this._FoodID;
			}
			set
			{
				if ((this._FoodID != value))
				{
					if (this._Food.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFoodIDChanging(value);
					this.SendPropertyChanging();
					this._FoodID = value;
					this.SendPropertyChanged("FoodID");
					this.OnFoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieTitle", DbType="NVarChar(255)")]
		public string MovieTitle
		{
			get
			{
				return this._MovieTitle;
			}
			set
			{
				if ((this._MovieTitle != value))
				{
					this.OnMovieTitleChanging(value);
					this.SendPropertyChanging();
					this._MovieTitle = value;
					this.SendPropertyChanged("MovieTitle");
					this.OnMovieTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CinemaName", DbType="NVarChar(255)")]
		public string CinemaName
		{
			get
			{
				return this._CinemaName;
			}
			set
			{
				if ((this._CinemaName != value))
				{
					this.OnCinemaNameChanging(value);
					this.SendPropertyChanging();
					this._CinemaName = value;
					this.SendPropertyChanged("CinemaName");
					this.OnCinemaNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatNumber", DbType="NVarChar(10)")]
		public string SeatNumber
		{
			get
			{
				return this._SeatNumber;
			}
			set
			{
				if ((this._SeatNumber != value))
				{
					this.OnSeatNumberChanging(value);
					this.SendPropertyChanging();
					this._SeatNumber = value;
					this.SendPropertyChanged("SeatNumber");
					this.OnSeatNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketTypeName", DbType="NVarChar(100)")]
		public string TicketTypeName
		{
			get
			{
				return this._TicketTypeName;
			}
			set
			{
				if ((this._TicketTypeName != value))
				{
					this.OnTicketTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TicketTypeName = value;
					this.SendPropertyChanged("TicketTypeName");
					this.OnTicketTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreeningID", DbType="Int")]
		public System.Nullable<int> ScreeningID
		{
			get
			{
				return this._ScreeningID;
			}
			set
			{
				if ((this._ScreeningID != value))
				{
					if (this._Screening.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScreeningIDChanging(value);
					this.SendPropertyChanging();
					this._ScreeningID = value;
					this.SendPropertyChanged("ScreeningID");
					this.OnScreeningIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodName", DbType="NVarChar(255)")]
		public string FoodName
		{
			get
			{
				return this._FoodName;
			}
			set
			{
				if ((this._FoodName != value))
				{
					this.OnFoodNameChanging(value);
					this.SendPropertyChanging();
					this._FoodName = value;
					this.SendPropertyChanged("FoodName");
					this.OnFoodNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodQuantity", DbType="Int")]
		public System.Nullable<int> FoodQuantity
		{
			get
			{
				return this._FoodQuantity;
			}
			set
			{
				if ((this._FoodQuantity != value))
				{
					this.OnFoodQuantityChanging(value);
					this.SendPropertyChanging();
					this._FoodQuantity = value;
					this.SendPropertyChanged("FoodQuantity");
					this.OnFoodQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cinema_OrderDetail", Storage="_Cinema", ThisKey="CinemaID", OtherKey="CinemaID", IsForeignKey=true)]
		public Cinema Cinema
		{
			get
			{
				return this._Cinema.Entity;
			}
			set
			{
				Cinema previousValue = this._Cinema.Entity;
				if (((previousValue != value) 
							|| (this._Cinema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cinema.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._Cinema.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._CinemaID = value.CinemaID;
					}
					else
					{
						this._CinemaID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cinema");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_OrderDetail", Storage="_Food", ThisKey="FoodID", OtherKey="FoodID", IsForeignKey=true)]
		public Food Food
		{
			get
			{
				return this._Food.Entity;
			}
			set
			{
				Food previousValue = this._Food.Entity;
				if (((previousValue != value) 
							|| (this._Food.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Food.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._Food.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._FoodID = value.FoodID;
					}
					else
					{
						this._FoodID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Food");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_OrderDetail", Storage="_Movy", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movy Movy
		{
			get
			{
				return this._Movy.Entity;
			}
			set
			{
				Movy previousValue = this._Movy.Entity;
				if (((previousValue != value) 
							|| (this._Movy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movy.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._Movy.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Movy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDetail", Storage="_Order", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Screening_OrderDetail", Storage="_Screening", ThisKey="ScreeningID", OtherKey="ScreeningID", IsForeignKey=true)]
		public Screening Screening
		{
			get
			{
				return this._Screening.Entity;
			}
			set
			{
				Screening previousValue = this._Screening.Entity;
				if (((previousValue != value) 
							|| (this._Screening.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Screening.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._Screening.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._ScreeningID = value.ScreeningID;
					}
					else
					{
						this._ScreeningID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Screening");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_OrderDetail", Storage="_Seat", ThisKey="SeatID", OtherKey="SeatID", IsForeignKey=true)]
		public Seat Seat
		{
			get
			{
				return this._Seat.Entity;
			}
			set
			{
				Seat previousValue = this._Seat.Entity;
				if (((previousValue != value) 
							|| (this._Seat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Seat.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._Seat.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._SeatID = value.SeatID;
					}
					else
					{
						this._SeatID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Seat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TicketType_OrderDetail", Storage="_TicketType", ThisKey="TicketTypeID", OtherKey="TicketTypeID", IsForeignKey=true)]
		public TicketType TicketType
		{
			get
			{
				return this._TicketType.Entity;
			}
			set
			{
				TicketType previousValue = this._TicketType.Entity;
				if (((previousValue != value) 
							|| (this._TicketType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketType.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._TicketType.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._TicketTypeID = value.TicketTypeID;
					}
					else
					{
						this._TicketTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TicketType");
				}
			}
		}

        public int? CustomerID { get; internal set; }

        public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private int _CustomerID;
		
		private System.Nullable<System.DateTime> _OrderDate;
		
		private double _TotalAmount;
		
		private string _PaymentStatus;
		
		private string _Email;
		
		private System.Nullable<int> _ScreeningID;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Screening> _Screening;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDateChanged();
    partial void OnTotalAmountChanging(double value);
    partial void OnTotalAmountChanged();
    partial void OnPaymentStatusChanging(string value);
    partial void OnPaymentStatusChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnScreeningIDChanging(System.Nullable<int> value);
    partial void OnScreeningIDChanged();
    #endregion
		
		public Order()
		{
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			this._Customer = default(EntityRef<Customer>);
			this._Screening = default(EntityRef<Screening>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Float NOT NULL")]
		public double TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentStatus", DbType="NVarChar(50)")]
		public string PaymentStatus
		{
			get
			{
				return this._PaymentStatus;
			}
			set
			{
				if ((this._PaymentStatus != value))
				{
					this.OnPaymentStatusChanging(value);
					this.SendPropertyChanging();
					this._PaymentStatus = value;
					this.SendPropertyChanged("PaymentStatus");
					this.OnPaymentStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreeningID", DbType="Int")]
		public System.Nullable<int> ScreeningID
		{
			get
			{
				return this._ScreeningID;
			}
			set
			{
				if ((this._ScreeningID != value))
				{
					if (this._Screening.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScreeningIDChanging(value);
					this.SendPropertyChanging();
					this._ScreeningID = value;
					this.SendPropertyChanged("ScreeningID");
					this.OnScreeningIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDetail", Storage="_OrderDetails", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Order", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Screening_Order", Storage="_Screening", ThisKey="ScreeningID", OtherKey="ScreeningID", IsForeignKey=true)]
		public Screening Screening
		{
			get
			{
				return this._Screening.Entity;
			}
			set
			{
				Screening previousValue = this._Screening.Entity;
				if (((previousValue != value) 
							|| (this._Screening.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Screening.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Screening.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._ScreeningID = value.ScreeningID;
					}
					else
					{
						this._ScreeningID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Screening");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rooms")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomID;
		
		private int _CinemaID;
		
		private string _RoomName;
		
		private int _SeatCapacity;
		
		private EntitySet<Screening> _Screenings;
		
		private EntitySet<Seat> _Seats;
		
		private EntityRef<Cinema> _Cinema;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnCinemaIDChanging(int value);
    partial void OnCinemaIDChanged();
    partial void OnRoomNameChanging(string value);
    partial void OnRoomNameChanged();
    partial void OnSeatCapacityChanging(int value);
    partial void OnSeatCapacityChanged();
    #endregion
		
		public Room()
		{
			this._Screenings = new EntitySet<Screening>(new Action<Screening>(this.attach_Screenings), new Action<Screening>(this.detach_Screenings));
			this._Seats = new EntitySet<Seat>(new Action<Seat>(this.attach_Seats), new Action<Seat>(this.detach_Seats));
			this._Cinema = default(EntityRef<Cinema>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CinemaID", DbType="Int NOT NULL")]
		public int CinemaID
		{
			get
			{
				return this._CinemaID;
			}
			set
			{
				if ((this._CinemaID != value))
				{
					if (this._Cinema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCinemaIDChanging(value);
					this.SendPropertyChanging();
					this._CinemaID = value;
					this.SendPropertyChanged("CinemaID");
					this.OnCinemaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RoomName
		{
			get
			{
				return this._RoomName;
			}
			set
			{
				if ((this._RoomName != value))
				{
					this.OnRoomNameChanging(value);
					this.SendPropertyChanging();
					this._RoomName = value;
					this.SendPropertyChanged("RoomName");
					this.OnRoomNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatCapacity", DbType="Int NOT NULL")]
		public int SeatCapacity
		{
			get
			{
				return this._SeatCapacity;
			}
			set
			{
				if ((this._SeatCapacity != value))
				{
					this.OnSeatCapacityChanging(value);
					this.SendPropertyChanging();
					this._SeatCapacity = value;
					this.SendPropertyChanged("SeatCapacity");
					this.OnSeatCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Screening", Storage="_Screenings", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<Screening> Screenings
		{
			get
			{
				return this._Screenings;
			}
			set
			{
				this._Screenings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Seat", Storage="_Seats", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<Seat> Seats
		{
			get
			{
				return this._Seats;
			}
			set
			{
				this._Seats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cinema_Room", Storage="_Cinema", ThisKey="CinemaID", OtherKey="CinemaID", IsForeignKey=true)]
		public Cinema Cinema
		{
			get
			{
				return this._Cinema.Entity;
			}
			set
			{
				Cinema previousValue = this._Cinema.Entity;
				if (((previousValue != value) 
							|| (this._Cinema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cinema.Entity = null;
						previousValue.Rooms.Remove(this);
					}
					this._Cinema.Entity = value;
					if ((value != null))
					{
						value.Rooms.Add(this);
						this._CinemaID = value.CinemaID;
					}
					else
					{
						this._CinemaID = default(int);
					}
					this.SendPropertyChanged("Cinema");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Screenings(Screening entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Screenings(Screening entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
		
		private void attach_Seats(Seat entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Seats(Seat entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Screenings")]
	public partial class Screening : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScreeningID;
		
		private int _MovieID;
		
		private int _RoomID;
		
		private System.DateTime _StartTime;
		
		private int _AvailableSeats;
		
		private System.DateTime _ScreeningDate;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<TemporaryReservation> _TemporaryReservations;
		
		private EntityRef<Movy> _Movy;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScreeningIDChanging(int value);
    partial void OnScreeningIDChanged();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnAvailableSeatsChanging(int value);
    partial void OnAvailableSeatsChanged();
    partial void OnScreeningDateChanging(System.DateTime value);
    partial void OnScreeningDateChanged();
    #endregion
		
		public Screening()
		{
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._TemporaryReservations = new EntitySet<TemporaryReservation>(new Action<TemporaryReservation>(this.attach_TemporaryReservations), new Action<TemporaryReservation>(this.detach_TemporaryReservations));
			this._Movy = default(EntityRef<Movy>);
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreeningID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScreeningID
		{
			get
			{
				return this._ScreeningID;
			}
			set
			{
				if ((this._ScreeningID != value))
				{
					this.OnScreeningIDChanging(value);
					this.SendPropertyChanging();
					this._ScreeningID = value;
					this.SendPropertyChanged("ScreeningID");
					this.OnScreeningIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL")]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailableSeats", DbType="Int NOT NULL")]
		public int AvailableSeats
		{
			get
			{
				return this._AvailableSeats;
			}
			set
			{
				if ((this._AvailableSeats != value))
				{
					this.OnAvailableSeatsChanging(value);
					this.SendPropertyChanging();
					this._AvailableSeats = value;
					this.SendPropertyChanged("AvailableSeats");
					this.OnAvailableSeatsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreeningDate", DbType="Date NOT NULL")]
		public System.DateTime ScreeningDate
		{
			get
			{
				return this._ScreeningDate;
			}
			set
			{
				if ((this._ScreeningDate != value))
				{
					this.OnScreeningDateChanging(value);
					this.SendPropertyChanging();
					this._ScreeningDate = value;
					this.SendPropertyChanged("ScreeningDate");
					this.OnScreeningDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Screening_OrderDetail", Storage="_OrderDetails", ThisKey="ScreeningID", OtherKey="ScreeningID")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Screening_Order", Storage="_Orders", ThisKey="ScreeningID", OtherKey="ScreeningID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Screening_TemporaryReservation", Storage="_TemporaryReservations", ThisKey="ScreeningID", OtherKey="ScreeningID")]
		public EntitySet<TemporaryReservation> TemporaryReservations
		{
			get
			{
				return this._TemporaryReservations;
			}
			set
			{
				this._TemporaryReservations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_Screening", Storage="_Movy", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movy Movy
		{
			get
			{
				return this._Movy.Entity;
			}
			set
			{
				Movy previousValue = this._Movy.Entity;
				if (((previousValue != value) 
							|| (this._Movy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movy.Entity = null;
						previousValue.Screenings.Remove(this);
					}
					this._Movy.Entity = value;
					if ((value != null))
					{
						value.Screenings.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("Movy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Screening", Storage="_Room", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Screenings.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Screenings.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(int);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Screening = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Screening = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Screening = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Screening = null;
		}
		
		private void attach_TemporaryReservations(TemporaryReservation entity)
		{
			this.SendPropertyChanging();
			entity.Screening = this;
		}
		
		private void detach_TemporaryReservations(TemporaryReservation entity)
		{
			this.SendPropertyChanging();
			entity.Screening = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seats")]
	public partial class Seat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeatID;
		
		private int _RoomID;
		
		private string _SeatNumber;
		
		private string _RowNumber;
		
		private string _ColumnNumber;
		
		private string _Status;
		
		private System.Nullable<System.DateTime> _ReservedUntil;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
		private EntitySet<TemporaryReservation> _TemporaryReservations;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeatIDChanging(int value);
    partial void OnSeatIDChanged();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnSeatNumberChanging(string value);
    partial void OnSeatNumberChanged();
    partial void OnRowNumberChanging(string value);
    partial void OnRowNumberChanged();
    partial void OnColumnNumberChanging(string value);
    partial void OnColumnNumberChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnReservedUntilChanging(System.Nullable<System.DateTime> value);
    partial void OnReservedUntilChanged();
    #endregion
		
		public Seat()
		{
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			this._TemporaryReservations = new EntitySet<TemporaryReservation>(new Action<TemporaryReservation>(this.attach_TemporaryReservations), new Action<TemporaryReservation>(this.detach_TemporaryReservations));
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SeatID
		{
			get
			{
				return this._SeatID;
			}
			set
			{
				if ((this._SeatID != value))
				{
					this.OnSeatIDChanging(value);
					this.SendPropertyChanging();
					this._SeatID = value;
					this.SendPropertyChanged("SeatID");
					this.OnSeatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatNumber", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string SeatNumber
		{
			get
			{
				return this._SeatNumber;
			}
			set
			{
				if ((this._SeatNumber != value))
				{
					this.OnSeatNumberChanging(value);
					this.SendPropertyChanging();
					this._SeatNumber = value;
					this.SendPropertyChanged("SeatNumber");
					this.OnSeatNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowNumber", DbType="NVarChar(5)")]
		public string RowNumber
		{
			get
			{
				return this._RowNumber;
			}
			set
			{
				if ((this._RowNumber != value))
				{
					this.OnRowNumberChanging(value);
					this.SendPropertyChanging();
					this._RowNumber = value;
					this.SendPropertyChanged("RowNumber");
					this.OnRowNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColumnNumber", DbType="NVarChar(5)")]
		public string ColumnNumber
		{
			get
			{
				return this._ColumnNumber;
			}
			set
			{
				if ((this._ColumnNumber != value))
				{
					this.OnColumnNumberChanging(value);
					this.SendPropertyChanging();
					this._ColumnNumber = value;
					this.SendPropertyChanged("ColumnNumber");
					this.OnColumnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservedUntil", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReservedUntil
		{
			get
			{
				return this._ReservedUntil;
			}
			set
			{
				if ((this._ReservedUntil != value))
				{
					this.OnReservedUntilChanging(value);
					this.SendPropertyChanging();
					this._ReservedUntil = value;
					this.SendPropertyChanged("ReservedUntil");
					this.OnReservedUntilChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_OrderDetail", Storage="_OrderDetails", ThisKey="SeatID", OtherKey="SeatID")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_TemporaryReservation", Storage="_TemporaryReservations", ThisKey="SeatID", OtherKey="SeatID")]
		public EntitySet<TemporaryReservation> TemporaryReservations
		{
			get
			{
				return this._TemporaryReservations;
			}
			set
			{
				this._TemporaryReservations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Seat", Storage="_Room", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Seats.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Seats.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(int);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Seat = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Seat = null;
		}
		
		private void attach_TemporaryReservations(TemporaryReservation entity)
		{
			this.SendPropertyChanging();
			entity.Seat = this;
		}
		
		private void detach_TemporaryReservations(TemporaryReservation entity)
		{
			this.SendPropertyChanging();
			entity.Seat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemporaryReservations")]
	public partial class TemporaryReservation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReservationID;
		
		private string _SessionID;
		
		private System.Nullable<int> _CustomerID;
		
		private int _ScreeningID;
		
		private int _MovieID;
		
		private string _MovieTitle;
		
		private int _CinemaID;
		
		private string _CinemaName;
		
		private System.Nullable<int> _SeatID;
		
		private string _SeatNumber;
		
		private System.Nullable<int> _TicketTypeID;
		
		private string _TicketTypeName;
		
		private double _Price;
		
		private string _ItemType;
		
		private System.Nullable<int> _FoodID;
		
		private System.Nullable<int> _Quantity;
		
		private System.DateTime _ScreeningTime;
		
		private System.Nullable<System.DateTime> _ExpirationTime;
		
		private string _FoodName;
		
		private System.Nullable<int> _FoodQuantity;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Food> _Food;
		
		private EntityRef<Screening> _Screening;
		
		private EntityRef<Seat> _Seat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReservationIDChanging(int value);
    partial void OnReservationIDChanged();
    partial void OnSessionIDChanging(string value);
    partial void OnSessionIDChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    partial void OnScreeningIDChanging(int value);
    partial void OnScreeningIDChanged();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnMovieTitleChanging(string value);
    partial void OnMovieTitleChanged();
    partial void OnCinemaIDChanging(int value);
    partial void OnCinemaIDChanged();
    partial void OnCinemaNameChanging(string value);
    partial void OnCinemaNameChanged();
    partial void OnSeatIDChanging(System.Nullable<int> value);
    partial void OnSeatIDChanged();
    partial void OnSeatNumberChanging(string value);
    partial void OnSeatNumberChanged();
    partial void OnTicketTypeIDChanging(System.Nullable<int> value);
    partial void OnTicketTypeIDChanged();
    partial void OnTicketTypeNameChanging(string value);
    partial void OnTicketTypeNameChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnItemTypeChanging(string value);
    partial void OnItemTypeChanged();
    partial void OnFoodIDChanging(System.Nullable<int> value);
    partial void OnFoodIDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnScreeningTimeChanging(System.DateTime value);
    partial void OnScreeningTimeChanged();
    partial void OnExpirationTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnExpirationTimeChanged();
    partial void OnFoodNameChanging(string value);
    partial void OnFoodNameChanged();
    partial void OnFoodQuantityChanging(System.Nullable<int> value);
    partial void OnFoodQuantityChanged();
    #endregion
		
		public TemporaryReservation()
		{
			this._Customer = default(EntityRef<Customer>);
			this._Food = default(EntityRef<Food>);
			this._Screening = default(EntityRef<Screening>);
			this._Seat = default(EntityRef<Seat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReservationID
		{
			get
			{
				return this._ReservationID;
			}
			set
			{
				if ((this._ReservationID != value))
				{
					this.OnReservationIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationID = value;
					this.SendPropertyChanged("ReservationID");
					this.OnReservationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreeningID", DbType="Int NOT NULL")]
		public int ScreeningID
		{
			get
			{
				return this._ScreeningID;
			}
			set
			{
				if ((this._ScreeningID != value))
				{
					if (this._Screening.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScreeningIDChanging(value);
					this.SendPropertyChanging();
					this._ScreeningID = value;
					this.SendPropertyChanged("ScreeningID");
					this.OnScreeningIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL")]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieTitle", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string MovieTitle
		{
			get
			{
				return this._MovieTitle;
			}
			set
			{
				if ((this._MovieTitle != value))
				{
					this.OnMovieTitleChanging(value);
					this.SendPropertyChanging();
					this._MovieTitle = value;
					this.SendPropertyChanged("MovieTitle");
					this.OnMovieTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CinemaID", DbType="Int NOT NULL")]
		public int CinemaID
		{
			get
			{
				return this._CinemaID;
			}
			set
			{
				if ((this._CinemaID != value))
				{
					this.OnCinemaIDChanging(value);
					this.SendPropertyChanging();
					this._CinemaID = value;
					this.SendPropertyChanged("CinemaID");
					this.OnCinemaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CinemaName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CinemaName
		{
			get
			{
				return this._CinemaName;
			}
			set
			{
				if ((this._CinemaName != value))
				{
					this.OnCinemaNameChanging(value);
					this.SendPropertyChanging();
					this._CinemaName = value;
					this.SendPropertyChanged("CinemaName");
					this.OnCinemaNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatID", DbType="Int")]
		public System.Nullable<int> SeatID
		{
			get
			{
				return this._SeatID;
			}
			set
			{
				if ((this._SeatID != value))
				{
					if (this._Seat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeatIDChanging(value);
					this.SendPropertyChanging();
					this._SeatID = value;
					this.SendPropertyChanged("SeatID");
					this.OnSeatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatNumber", DbType="NVarChar(50)")]
		public string SeatNumber
		{
			get
			{
				return this._SeatNumber;
			}
			set
			{
				if ((this._SeatNumber != value))
				{
					this.OnSeatNumberChanging(value);
					this.SendPropertyChanging();
					this._SeatNumber = value;
					this.SendPropertyChanged("SeatNumber");
					this.OnSeatNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketTypeID", DbType="Int")]
		public System.Nullable<int> TicketTypeID
		{
			get
			{
				return this._TicketTypeID;
			}
			set
			{
				if ((this._TicketTypeID != value))
				{
					this.OnTicketTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TicketTypeID = value;
					this.SendPropertyChanged("TicketTypeID");
					this.OnTicketTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketTypeName", DbType="NVarChar(255)")]
		public string TicketTypeName
		{
			get
			{
				return this._TicketTypeName;
			}
			set
			{
				if ((this._TicketTypeName != value))
				{
					this.OnTicketTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TicketTypeName = value;
					this.SendPropertyChanged("TicketTypeName");
					this.OnTicketTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ItemType
		{
			get
			{
				return this._ItemType;
			}
			set
			{
				if ((this._ItemType != value))
				{
					this.OnItemTypeChanging(value);
					this.SendPropertyChanging();
					this._ItemType = value;
					this.SendPropertyChanged("ItemType");
					this.OnItemTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodID", DbType="Int")]
		public System.Nullable<int> FoodID
		{
			get
			{
				return this._FoodID;
			}
			set
			{
				if ((this._FoodID != value))
				{
					if (this._Food.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFoodIDChanging(value);
					this.SendPropertyChanging();
					this._FoodID = value;
					this.SendPropertyChanged("FoodID");
					this.OnFoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreeningTime", DbType="DateTime NOT NULL")]
		public System.DateTime ScreeningTime
		{
			get
			{
				return this._ScreeningTime;
			}
			set
			{
				if ((this._ScreeningTime != value))
				{
					this.OnScreeningTimeChanging(value);
					this.SendPropertyChanging();
					this._ScreeningTime = value;
					this.SendPropertyChanged("ScreeningTime");
					this.OnScreeningTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpirationTime
		{
			get
			{
				return this._ExpirationTime;
			}
			set
			{
				if ((this._ExpirationTime != value))
				{
					this.OnExpirationTimeChanging(value);
					this.SendPropertyChanging();
					this._ExpirationTime = value;
					this.SendPropertyChanged("ExpirationTime");
					this.OnExpirationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodName", DbType="NVarChar(255)")]
		public string FoodName
		{
			get
			{
				return this._FoodName;
			}
			set
			{
				if ((this._FoodName != value))
				{
					this.OnFoodNameChanging(value);
					this.SendPropertyChanging();
					this._FoodName = value;
					this.SendPropertyChanged("FoodName");
					this.OnFoodNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodQuantity", DbType="Int")]
		public System.Nullable<int> FoodQuantity
		{
			get
			{
				return this._FoodQuantity;
			}
			set
			{
				if ((this._FoodQuantity != value))
				{
					this.OnFoodQuantityChanging(value);
					this.SendPropertyChanging();
					this._FoodQuantity = value;
					this.SendPropertyChanged("FoodQuantity");
					this.OnFoodQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_TemporaryReservation", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.TemporaryReservations.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.TemporaryReservations.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_TemporaryReservation", Storage="_Food", ThisKey="FoodID", OtherKey="FoodID", IsForeignKey=true)]
		public Food Food
		{
			get
			{
				return this._Food.Entity;
			}
			set
			{
				Food previousValue = this._Food.Entity;
				if (((previousValue != value) 
							|| (this._Food.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Food.Entity = null;
						previousValue.TemporaryReservations.Remove(this);
					}
					this._Food.Entity = value;
					if ((value != null))
					{
						value.TemporaryReservations.Add(this);
						this._FoodID = value.FoodID;
					}
					else
					{
						this._FoodID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Food");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Screening_TemporaryReservation", Storage="_Screening", ThisKey="ScreeningID", OtherKey="ScreeningID", IsForeignKey=true)]
		public Screening Screening
		{
			get
			{
				return this._Screening.Entity;
			}
			set
			{
				Screening previousValue = this._Screening.Entity;
				if (((previousValue != value) 
							|| (this._Screening.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Screening.Entity = null;
						previousValue.TemporaryReservations.Remove(this);
					}
					this._Screening.Entity = value;
					if ((value != null))
					{
						value.TemporaryReservations.Add(this);
						this._ScreeningID = value.ScreeningID;
					}
					else
					{
						this._ScreeningID = default(int);
					}
					this.SendPropertyChanged("Screening");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_TemporaryReservation", Storage="_Seat", ThisKey="SeatID", OtherKey="SeatID", IsForeignKey=true)]
		public Seat Seat
		{
			get
			{
				return this._Seat.Entity;
			}
			set
			{
				Seat previousValue = this._Seat.Entity;
				if (((previousValue != value) 
							|| (this._Seat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Seat.Entity = null;
						previousValue.TemporaryReservations.Remove(this);
					}
					this._Seat.Entity = value;
					if ((value != null))
					{
						value.TemporaryReservations.Add(this);
						this._SeatID = value.SeatID;
					}
					else
					{
						this._SeatID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Seat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketTypes")]
	public partial class TicketType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketTypeID;
		
		private string _TypeName;
		
		private double _DefaultPrice;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketTypeIDChanging(int value);
    partial void OnTicketTypeIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnDefaultPriceChanging(double value);
    partial void OnDefaultPriceChanged();
    #endregion
		
		public TicketType()
		{
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TicketTypeID
		{
			get
			{
				return this._TicketTypeID;
			}
			set
			{
				if ((this._TicketTypeID != value))
				{
					this.OnTicketTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TicketTypeID = value;
					this.SendPropertyChanged("TicketTypeID");
					this.OnTicketTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultPrice", DbType="Float NOT NULL")]
		public double DefaultPrice
		{
			get
			{
				return this._DefaultPrice;
			}
			set
			{
				if ((this._DefaultPrice != value))
				{
					this.OnDefaultPriceChanging(value);
					this.SendPropertyChanging();
					this._DefaultPrice = value;
					this.SendPropertyChanged("DefaultPrice");
					this.OnDefaultPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TicketType_OrderDetail", Storage="_OrderDetails", ThisKey="TicketTypeID", OtherKey="TicketTypeID")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.TicketType = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.TicketType = null;
		}
	}
}
#pragma warning restore 1591
